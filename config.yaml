
singleuser:
  image:
    name: "SINGLEUSER_IMAGE_NAME"
    tag: dev
  memory:
    limit: 1G
    guarantee: 200M
  cpu:
    limit: 1
    guarantee: .3
  storage:
    # User data is mounted via a pre-spawn hook (see extraConfig below)
    type: none

debug:
  enabled: true

proxy:
  secretToken: "SECRET"
  service:
    type: NodePort
    nodePorts:
      http: 31212

# Remove inactive user pods (set to defaults)
cull:
  timeout: 3600
  every: 600

rbac:
  enabled: true

# Put the user data directory path here so we can access it
# from the extraConfig python context
custom:
  userDataDir: "USER_DATA_PATH"
  publicModelsDir: /stochss/singleuser/public_models

hub:
  image:
    name: "HUB_IMAGE_NAME"
    tag: dev
  db:
    type: sqlite-memory
  extraVolumes:
    # DANGER! ORDER MATTERS IN THIS LIST!
    # See install_jhub.sh script for more info on how these values are set
    - name: stochss
      hostPath:
        path: "MOUNT_PATH"
        type: Directory
    - name: stochss-user-data
      hostPath:
        path: "USER_DATA_PATH"
        type: Directory
  extraVolumeMounts:
    - mountPath: /stochss
      name: stochss
    - mountPath: /stochss-user-data
      name: stochss-user-data

  cookieSecret: "SECRET"
  
  extraConfig: 
    oauth: ""
    stochss: |
      import sys, os.path, z2jh, shutil

      def kubespawner_pre_spawn_hook(spawner):
        username = spawner.user.name

        sanitized_username = username.replace("@", "-40").replace(".", "-2e")

        # We mounted all the user data to the hub so we can make user data dirs for new users
        user_data_path_on_hub = os.path.join('/stochss-user-data', sanitized_username)

        if not os.path.exists(user_data_path_on_hub):
          # Setup new user's directory
          os.mkdir(user_data_path_on_hub)
          publicModelsDirSrc = z2jh.get_config('custom.publicModelsDir')
          publicModelsDirDst = os.path.join(user_data_path_on_hub, 'Examples')
          shutil.copytree(publicModelsDirSrc, publicModelsDirDst)
        
        user_data_path_on_host = os.path.join(z2jh.get_config('custom.userDataDir'), sanitized_username)

        spawner.volumes.append({
          'name': sanitized_username + '-data',
          'hostPath': {
            'path': os.path.join(user_data_path_on_host),
            'type': 'Directory'
          }
        })

        spawner.volume_mounts.append({
          'mountPath': '/home/jovyan',
          'name': sanitized_username + '-data'
        })

      c.Spawner.pre_spawn_hook = kubespawner_pre_spawn_hook

      sys.path.insert(1, '/stochss')

      c.JupyterHub.log_level = 'DEBUG'

      c.JupyterHub.default_url = '/stochss'

      # Page handlers
      from handlers.pages import \
        HomeHandler, \
        ModelBrowserHandler, \
        ModelEditorHandler, \
        WorkflowSelectionHandler, \
        WorkflowEditorHandler

      # File Browser API Handlers
      from handlers.file_browser import \
        ModelBrowserFileList, \
        ModelToNotebookHandler, \
        DeleteFileAPIHandler, \
        MoveFileAPIHandler, \
        DuplicateModelHandler, \
        DuplicateDirectoryHandler, \
        RenameAPIHandler, \
        ConvertToSpatialAPIHandler, \
        ConvertToModelAPIHandler, \
        SBMLToModelAPIHandler, \
        ModelToSBMLAPIHandler, \
        DownloadAPIHandler, \
        CreateDirectoryHandler
        
      # Model API handlers
      from handlers.models import \
        JsonFileAPIHandler, \
        RunModelAPIHandler

      # Workflow API Handlers
      from handlers.workflows import \
        WorkflowNotebookHandler, \
        SaveWorkflowAPIHandler, \
        RunWorkflowAPIHandler, \
        WorkflowInfoAPIHandler, \
        WorkflowStatusAPIHandler, \
        WorkflowLogsAPIHandler, \
        PlotWorkflowResultsAPIHandler

      # Username API Handler
      from handlers.username import UsernameHandler

      # StochSS request handlers
      c.JupyterHub.extra_handlers = [
          # API handlers
          (r"/stochss/api/user\/?", UsernameHandler),
          (r"/stochss/api/json-data/(.+)\/?", JsonFileAPIHandler),
          (r"/stochss/api/models/run/(\w+)/(\w+)?\/?(.+)\/?", RunModelAPIHandler),
          (r"/stochss/api/model/duplicate/(.+)\/?", DuplicateModelHandler),
          (r"/stochss/api/models/to-notebook/(.+)\/?", ModelToNotebookHandler),
          (r"/stochss/api/model/to-spatial/(.+)\/?", ConvertToSpatialAPIHandler),
          (r"/stochss/api/model/to-sbml/(.+)\/?", ModelToSBMLAPIHandler),
          (r"/stochss/api/spatial/to-model/(.+)\/?", ConvertToModelAPIHandler),
          (r"/stochss/api/sbml/to-model/(.+)\/?", SBMLToModelAPIHandler),
          (r"/stochss/api/workflow/notebook/(\w+)/(.+)\/?", WorkflowNotebookHandler),
          (r"/stochss/api/workflow/save-workflow/(\w+)/(\w+)\/?(.+)\/?", SaveWorkflowAPIHandler),
          (r"/stochss/api/workflow/run-workflow/(\w+)/(\w+)\/?(.+)\/?", RunWorkflowAPIHandler),
          (r"/stochss/api/workflow/workflow-info(.+)\/?", WorkflowInfoAPIHandler),
          (r"/stochss/api/workflow/workflow-status/(.+)\/?", WorkflowStatusAPIHandler),
          (r"/stochss/api/workflow/workflow-logs/(.+)\/?", WorkflowLogsAPIHandler),
          (r"/stochss/api/workflow/plot-results/(.+)\/?", PlotWorkflowResultsAPIHandler),
          (r"/stochss/api/file/move/(.+)\/?", MoveFileAPIHandler),
          (r"/stochss/api/file/delete(.+)\/?", DeleteFileAPIHandler),
          (r"/stochss/api/file/rename/(.+)\/?", RenameAPIHandler),
          (r"/stochss/api/file/download/(.+)\/?", DownloadAPIHandler),
          (r"/stochss/api/directory/duplicate/(.+)\/?", DuplicateDirectoryHandler),
          (r"/stochss/api/directory/create/(.+)\/?", CreateDirectoryHandler),
          # Pages
          (r"/stochss\/?", HomeHandler),
          (r"/stochss/models\/?$", ModelBrowserHandler),
          (r"/stochss/models/browser-list(.+)\/?", ModelBrowserFileList),
          (r"/stochss/models/edit\/?(.+)?\/?", ModelEditorHandler),
          (r"/stochss/workflow/selection\/?(.+)?\/?", WorkflowSelectionHandler),
          (r"/stochss/workflow/edit\/?(.+)?\/?", WorkflowEditorHandler),
          #(r"/stochss.*", MainHandler)
      ]

      ## Paths to search for jinja templates, before using the default templates.
      c.JupyterHub.template_paths = [
        "/stochss/jupyterhub_templates/",
        "/usr/local/share/jupyterhub/static/stochss/"
      ]

